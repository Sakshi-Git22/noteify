{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n/**\n * All the routes related to Archives are present here.\n *  These are Privately accessible routes.\n * */\n\n/**\n * This handler handles gets all archived notes in the db.\n * send GET Request at /api/archives\n * */\n\nexport const getAllArchivedNotesHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (!user) {\n    return new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  return new Response(200, {}, {\n    archives: user.archives\n  });\n};\n/**\n * This handler handles deletes note from archive.\n * send DELETE Request at /api/archives/delete/:noteId\n * */\n\nexport const deleteFromArchivesHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (!user) {\n    return new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const {\n    noteId\n  } = request.params;\n  user.archives = user.archives.filter(note => note._id !== noteId);\n  this.db.users.update({\n    _id: user._id\n  }, user);\n  return new Response(200, {}, {\n    archives: user.archives\n  });\n};\n/**\n * This handler handles restoring the archived notes to user notes.\n * send POST Request at /api/archives/restore/:noteId\n * */\n\nexport const restoreFromArchivesHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n\n  if (!user) {\n    return new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const {\n    noteId\n  } = request.params;\n  const restoredNote = user.archives.filter(note => note._id === noteId)[0];\n  user.archives = user.archives.filter(note => note._id !== noteId);\n  user.notes.push({ ...restoredNote\n  });\n  this.db.users.update({\n    _id: user._id\n  }, user);\n  return new Response(200, {}, {\n    archives: user.archives,\n    notes: user.notes\n  });\n};","map":{"version":3,"sources":["/Users/amiteshmanitiwari/Downloads/my-notes/src/backend/controllers/ArchiveController.js"],"names":["Response","requiresAuth","getAllArchivedNotesHandler","schema","request","user","call","errors","archives","deleteFromArchivesHandler","noteId","params","filter","note","_id","db","users","update","restoreFromArchivesHandler","restoredNote","notes","push"],"mappings":"AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,0BAA0B,GAAG,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AACnE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI,CAACC,IAAL,EAAW;AACT,WAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,MAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,KAHK,CAAP;AAOD;;AACD,SAAO,IAAIP,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,IAAAA,QAAQ,EAAEH,IAAI,CAACG;AAAjB,GAAtB,CAAP;AACD,CAZM;AAcP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,yBAAyB,GAAG,UAAUN,MAAV,EAAkBC,OAAlB,EAA2B;AAClE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI,CAACC,IAAL,EAAW;AACT,WAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,MAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,KAHK,CAAP;AAOD;;AACD,QAAM;AAAEG,IAAAA;AAAF,MAAaN,OAAO,CAACO,MAA3B;AACAN,EAAAA,IAAI,CAACG,QAAL,GAAgBH,IAAI,CAACG,QAAL,CAAcI,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAA5C,CAAhB;AACA,OAAKK,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEH,IAAAA,GAAG,EAAET,IAAI,CAACS;AAAZ,GAArB,EAAwCT,IAAxC;AACA,SAAO,IAAIL,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,IAAAA,QAAQ,EAAEH,IAAI,CAACG;AAAjB,GAAtB,CAAP;AACD,CAfM;AAiBP;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,0BAA0B,GAAG,UAAUf,MAAV,EAAkBC,OAAlB,EAA2B;AACnE,QAAMC,IAAI,GAAGJ,YAAY,CAACK,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB,CAAb;;AACA,MAAI,CAACC,IAAL,EAAW;AACT,WAAO,IAAIL,QAAJ,CACL,GADK,EAEL,EAFK,EAGL;AACEO,MAAAA,MAAM,EAAE,CAAC,0DAAD;AADV,KAHK,CAAP;AAOD;;AACD,QAAM;AAAEG,IAAAA;AAAF,MAAaN,OAAO,CAACO,MAA3B;AACA,QAAMQ,YAAY,GAAGd,IAAI,CAACG,QAAL,CAAcI,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAA5C,EAAoD,CAApD,CAArB;AACAL,EAAAA,IAAI,CAACG,QAAL,GAAgBH,IAAI,CAACG,QAAL,CAAcI,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAA5C,CAAhB;AACAL,EAAAA,IAAI,CAACe,KAAL,CAAWC,IAAX,CAAgB,EAAE,GAAGF;AAAL,GAAhB;AACA,OAAKJ,EAAL,CAAQC,KAAR,CAAcC,MAAd,CAAqB;AAAEH,IAAAA,GAAG,EAAET,IAAI,CAACS;AAAZ,GAArB,EAAwCT,IAAxC;AACA,SAAO,IAAIL,QAAJ,CAAa,GAAb,EAAkB,EAAlB,EAAsB;AAAEQ,IAAAA,QAAQ,EAAEH,IAAI,CAACG,QAAjB;AAA2BY,IAAAA,KAAK,EAAEf,IAAI,CAACe;AAAvC,GAAtB,CAAP;AACD,CAjBM","sourcesContent":["import { Response } from \"miragejs\";\nimport { requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Archives are present here.\n *  These are Privately accessible routes.\n * */\n\n/**\n * This handler handles gets all archived notes in the db.\n * send GET Request at /api/archives\n * */\n\nexport const getAllArchivedNotesHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  if (!user) {\n    return new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  return new Response(200, {}, { archives: user.archives });\n};\n\n/**\n * This handler handles deletes note from archive.\n * send DELETE Request at /api/archives/delete/:noteId\n * */\n\nexport const deleteFromArchivesHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  if (!user) {\n    return new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const { noteId } = request.params;\n  user.archives = user.archives.filter((note) => note._id !== noteId);\n  this.db.users.update({ _id: user._id }, user);\n  return new Response(200, {}, { archives: user.archives });\n};\n\n/**\n * This handler handles restoring the archived notes to user notes.\n * send POST Request at /api/archives/restore/:noteId\n * */\n\nexport const restoreFromArchivesHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  if (!user) {\n    return new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const { noteId } = request.params;\n  const restoredNote = user.archives.filter((note) => note._id === noteId)[0];\n  user.archives = user.archives.filter((note) => note._id !== noteId);\n  user.notes.push({ ...restoredNote });\n  this.db.users.update({ _id: user._id }, user);\n  return new Response(200, {}, { archives: user.archives, notes: user.notes });\n};\n"]},"metadata":{},"sourceType":"module"}