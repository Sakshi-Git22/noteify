{"ast":null,"code":"import { Server, Model, RestSerializer } from \"miragejs\";\nimport { deleteFromArchivesHandler, getAllArchivedNotesHandler, restoreFromArchivesHandler } from \"./backend/controllers/ArchiveController\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { archiveNoteHandler, createNoteHandler, deleteNoteHandler, getAllNotesHandler, updateNoteHandler } from \"./backend/controllers/NotesController\";\nimport { users } from \"./backend/db/users\";\nexport function makeServer() {\n  let {\n    environment = \"development\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const server = new Server({\n    serializers: {\n      application: RestSerializer\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      user: Model,\n      notes: Model\n    },\n\n    seeds(server) {\n      server.logging = false;\n      users.forEach(item => server.create(\"user\", { ...item,\n        notes: [],\n        archives: []\n      }));\n    },\n\n    routes() {\n      this.namespace = \"api\"; // auth routes (public)\n\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this)); // notes routes (private)\n\n      this.get(\"/notes\", getAllNotesHandler.bind(this));\n      this.post(\"/notes\", createNoteHandler.bind(this));\n      this.post(\"/notes/:noteId\", updateNoteHandler.bind(this));\n      this.delete(\"/notes/:noteId\", deleteNoteHandler.bind(this));\n      this.post(\"/notes/archives/:noteId\", archiveNoteHandler.bind(this)); // archive routes (private)\n\n      this.get(\"/archives\", getAllArchivedNotesHandler.bind(this));\n      this.post(\"/archives/restore/:noteId\", restoreFromArchivesHandler.bind(this));\n      this.delete(\"/archives/delete/:noteId\", deleteFromArchivesHandler.bind(this));\n    }\n\n  });\n  return server;\n}","map":{"version":3,"sources":["/Users/amiteshmanitiwari/Downloads/my-notes/src/server.js"],"names":["Server","Model","RestSerializer","deleteFromArchivesHandler","getAllArchivedNotesHandler","restoreFromArchivesHandler","loginHandler","signupHandler","archiveNoteHandler","createNoteHandler","deleteNoteHandler","getAllNotesHandler","updateNoteHandler","users","makeServer","environment","server","serializers","application","models","user","notes","seeds","logging","forEach","item","create","archives","routes","namespace","post","bind","get","delete"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,cAAxB,QAA8C,UAA9C;AACA,SACEC,yBADF,EAEEC,0BAFF,EAGEC,0BAHF,QAIO,yCAJP;AAKA,SACEC,YADF,EAEEC,aAFF,QAGO,sCAHP;AAIA,SACEC,kBADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,kBAJF,EAKEC,iBALF,QAMO,uCANP;AAOA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,OAAO,SAASC,UAAT,GAA0D;AAAA,MAAtC;AAAEC,IAAAA,WAAW,GAAG;AAAhB,GAAsC,uEAAJ,EAAI;AAC/D,QAAMC,MAAM,GAAG,IAAIhB,MAAJ,CAAW;AACxBiB,IAAAA,WAAW,EAAE;AACXC,MAAAA,WAAW,EAAEhB;AADF,KADW;AAIxBa,IAAAA,WAJwB;AAKxB;AACAI,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEnB,KADA;AAENoB,MAAAA,KAAK,EAAEpB;AAFD,KANgB;;AAWxBqB,IAAAA,KAAK,CAACN,MAAD,EAAS;AACZA,MAAAA,MAAM,CAACO,OAAP,GAAiB,KAAjB;AACAV,MAAAA,KAAK,CAACW,OAAN,CAAeC,IAAD,IACZT,MAAM,CAACU,MAAP,CAAc,MAAd,EAAsB,EACpB,GAAGD,IADiB;AAEpBJ,QAAAA,KAAK,EAAE,EAFa;AAGpBM,QAAAA,QAAQ,EAAE;AAHU,OAAtB,CADF;AAOD,KApBuB;;AAsBxBC,IAAAA,MAAM,GAAG;AACP,WAAKC,SAAL,GAAiB,KAAjB,CADO,CAEP;;AACA,WAAKC,IAAL,CAAU,cAAV,EAA0BvB,aAAa,CAACwB,IAAd,CAAmB,IAAnB,CAA1B;AACA,WAAKD,IAAL,CAAU,aAAV,EAAyBxB,YAAY,CAACyB,IAAb,CAAkB,IAAlB,CAAzB,EAJO,CAMP;;AACA,WAAKC,GAAL,CAAS,QAAT,EAAmBrB,kBAAkB,CAACoB,IAAnB,CAAwB,IAAxB,CAAnB;AACA,WAAKD,IAAL,CAAU,QAAV,EAAoBrB,iBAAiB,CAACsB,IAAlB,CAAuB,IAAvB,CAApB;AACA,WAAKD,IAAL,CAAU,gBAAV,EAA4BlB,iBAAiB,CAACmB,IAAlB,CAAuB,IAAvB,CAA5B;AACA,WAAKE,MAAL,CAAY,gBAAZ,EAA8BvB,iBAAiB,CAACqB,IAAlB,CAAuB,IAAvB,CAA9B;AACA,WAAKD,IAAL,CAAU,yBAAV,EAAqCtB,kBAAkB,CAACuB,IAAnB,CAAwB,IAAxB,CAArC,EAXO,CAaP;;AACA,WAAKC,GAAL,CAAS,WAAT,EAAsB5B,0BAA0B,CAAC2B,IAA3B,CAAgC,IAAhC,CAAtB;AACA,WAAKD,IAAL,CACE,2BADF,EAEEzB,0BAA0B,CAAC0B,IAA3B,CAAgC,IAAhC,CAFF;AAIA,WAAKE,MAAL,CACE,0BADF,EAEE9B,yBAAyB,CAAC4B,IAA1B,CAA+B,IAA/B,CAFF;AAID;;AA7CuB,GAAX,CAAf;AA+CA,SAAOf,MAAP;AACD","sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\nimport {\n  deleteFromArchivesHandler,\n  getAllArchivedNotesHandler,\n  restoreFromArchivesHandler,\n} from \"./backend/controllers/ArchiveController\";\nimport {\n  loginHandler,\n  signupHandler,\n} from \"./backend/controllers/AuthController\";\nimport {\n  archiveNoteHandler,\n  createNoteHandler,\n  deleteNoteHandler,\n  getAllNotesHandler,\n  updateNoteHandler,\n} from \"./backend/controllers/NotesController\";\nimport { users } from \"./backend/db/users\";\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  const server = new Server({\n    serializers: {\n      application: RestSerializer,\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      user: Model,\n      notes: Model,\n    },\n\n    seeds(server) {\n      server.logging = false;\n      users.forEach((item) =>\n        server.create(\"user\", {\n          ...item,\n          notes: [],\n          archives: [],\n        })\n      );\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      // auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // notes routes (private)\n      this.get(\"/notes\", getAllNotesHandler.bind(this));\n      this.post(\"/notes\", createNoteHandler.bind(this));\n      this.post(\"/notes/:noteId\", updateNoteHandler.bind(this));\n      this.delete(\"/notes/:noteId\", deleteNoteHandler.bind(this));\n      this.post(\"/notes/archives/:noteId\", archiveNoteHandler.bind(this));\n\n      // archive routes (private)\n      this.get(\"/archives\", getAllArchivedNotesHandler.bind(this));\n      this.post(\n        \"/archives/restore/:noteId\",\n        restoreFromArchivesHandler.bind(this)\n      );\n      this.delete(\n        \"/archives/delete/:noteId\",\n        deleteFromArchivesHandler.bind(this)\n      );\n    },\n  });\n  return server;\n}\n"]},"metadata":{},"sourceType":"module"}